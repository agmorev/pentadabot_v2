from aiogram import types
from loader import dp, bot
from aiogram.dispatcher import FSMContext

from states.login import Login
from states.getfile import Getfile
from keyboards.inline.cabinet_markup import cabinet_markup, login_markup, order_markup
import datetime
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentType
import re
import sqlite3
import smtplib


user_email=''
user_password=''
user_company=''
user_fullname=''

@dp.message_handler(text="üíº –ö–∞–±—ñ–Ω–µ—Ç")
async def bot_info(message: types.Message):
    await message.answer('‚ö†Ô∏è –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤. –î–æ—Å—Ç—É–ø –¥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º –ø—ñ—Å–ª—è —É–∫–ª–∞–¥–µ–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É.')    
    await message.answer('–î–ª—è –¥–æ—Å—Ç—É–ø—É –≤ –∫–∞–±—ñ–Ω–µ—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É "–£–≤—ñ–π—Ç–∏...", –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å.', reply_markup=login_markup)

@dp.callback_query_handler(text_contains="login")
async def cabinet_login(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await Login.email_state.set()
    await call.message.answer('üìß –í–≤–µ–¥—ñ—Ç—å email:')
    
@dp.message_handler(state=Login.email_state)
async def answer_email(message: types.Message, state: FSMContext):
    if re.match(r'[\w\.-]+@[\w\.-]+(\.[\w]+)+', message.text):
        user_email = message.text
        await state.update_data(answer1=user_email)
        await message.answer("üîë –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
        await Login.next()
    else:
        await message.answer('‚ùóÔ∏è–í–≤–µ–¥–µ–Ω–µ –í–∞–º–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É –∞–¥—Ä–µ—Å–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏!!! –û—á—ñ–∫—É—é –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email...')  

@dp.message_handler(state=Login.password_state)
async def answer_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    global user_email, user_password
    user_email = data.get("answer1")
    user_password = message.text
    await state.update_data(answer2=user_password)
    
    #Verifying login and password with information from database
    try:
        #conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
        conn = sqlite3.connect('D:\PYTHON\PROJECTS\Bots\pentadabot_v2\data\pentada.db')
        cursor = conn.cursor()
        print('-----------------CABINET-------------------')
        print("Cabinet successfully connected to SQLite by | ", user_email,' | ', datetime.datetime.now())
        cursor.execute('SELECT * FROM users WHERE email=? AND password=?;', (user_email, user_password))
        found = cursor.fetchone()
        if found:
            global user_fullname, user_company
            user_fullname = found[3]+' '+found[4]
            user_company = found[5]
            await message.answer('<b>–û–°–û–ë–ò–°–¢–ò–ô –ö–ê–ë–Ü–ù–ï–¢</b>')
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é", reply_markup=cabinet_markup)
        else:
            await message.answer('‚õîÔ∏è–£ –¥–æ—Å—Ç—É–ø—ñ –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ. –í–≤–µ–¥–µ–Ω—ñ –í–∞–º–∏ –∞–¥—Ä–µ—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏ —Ç–∞/–∞–±–æ –ø–∞—Ä–æ–ª—å —î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏!!!')
        cursor.close()

    except sqlite3.Error as error:
        print("Failed to work with sqlite table users", error)
    finally:
        if (conn):
            conn.close()
            print("The SQLite connection is closed")

    await state.finish()

@dp.callback_query_handler(text_contains="orders")
async def cabinet_orders(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üìë <b>–ó–ê–Ø–í–ö–ò</b>')
    await call.message.answer('–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–¥–∞—á—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –≥–∞—Ä–∞–Ω—Ç—ñ—ó.', reply_markup=order_markup)

@dp.callback_query_handler(text_contains="order_download")
async def cabinet_order_send(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üì§ <b>–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ê–Ø–í–ö–ò</b>')
    await call.message.answer('–ó–∞—è–≤–∫—É –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª—ñ order.xlsx. –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Ü–∏–º –±–ª–∞–Ω–∫–æ–º –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–æ—Ç–æ–≤—É –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –ö–∞–±—ñ–Ω–µ—Ç—É.')


@dp.callback_query_handler(text_contains="order_send")
async def cabinet_order_send(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await Getfile.load_state.set()
    await call.message.answer('üì§ <b>–ù–ê–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–Ø–í–ö–ò</b>')
    await call.message.answer('–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ doc, docx –∞–±–æ –º–∏—Ç–Ω–æ—ó –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó –≤ —Ñ–æ—Ä–º–∞—Ç—ñ imfx. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é Telegram.')

@dp.message_handler(state=Getfile.load_state, content_types=ContentType.DOCUMENT)
async def load_file(message: types.Message, state: FSMContext):
    await message.document.download()
    order_fileid = message.document.file_id
    order_filename = message.document.file_name
    ext = ('doc', 'docx', 'imfx')
    if order_filename.endswith(ext):
        await state.update_data(answer=order_fileid)    
        await bot.send_message("-400711737", f"‚ÄºÔ∏è –ù–æ–≤–∞ –ó–ê–Ø–í–ö–ê –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_fullname} ({user_email}) –∫–æ–º–ø–∞–Ω—ñ—ó {user_company}")
        await message.forward("-400711737")
        await message.reply(f"–ó–∞—è–≤–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ {order_filename} —Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        await state.finish()      
    else:
        await message.reply('‚ùóÔ∏è–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –í–∞–º–∏ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É doc, docx, imfx!!! –û—á—ñ–∫—É—é –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É...')      
    
@dp.message_handler(state=Getfile.load_state, content_types=ContentType.ANY)
async def load_file(message: types.Message, state: FSMContext):
    await message.reply('‚ùóÔ∏è–í–≤–µ–¥–µ–Ω–µ –í–∞–º–∏ –Ω–µ —î —Ñ–∞–π–ª–æ–º —Ç–∞/–∞–±–æ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É doc, docx, imfx!!! –û—á—ñ–∫—É—é –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É...')    

@dp.callback_query_handler(text_contains="reports")
async def cabinet_reports(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üìä <b>–ó–í–Ü–¢–ò</b>')
    await call.message.answer('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤ –ø—Ä–æ –≤–∏–¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—É –≥–∞—Ä–∞–Ω—Ç—ñ—ó –≤–ø—Ä–æ–¥–æ–≤–∂ –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —á–∞—Å—É.')

@dp.callback_query_handler(text_contains="requisits")
async def cabinet_requisits(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üè¶ <b>–†–ï–ö–í–Ü–ó–ò–¢–ò –ì–ê–†–ê–ù–¢–ê</b>')
    await call.message.answer('–û—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –ü–¢ "–ü–ï–ù–¢–ê–î–ê –¢–†–ê–ù–°".')
    requisits_info = "\n".join(
        [
            '<b>–ü–¢ ¬´–ü–ï–ù–¢–ê–î–ê –¢–†–ê–ù–°¬ª</b>',
            '',
            '04080, –£–∫—Ä–∞—ó–Ω–∞, –º. –ö–∏—ó–≤',
            '–≤—É–ª. –•–≤–æ–π–∫–∏ –í—ñ–∫–µ–Ω—Ç—ñ—è, –±—É–¥. 21, –æ—Ñ—ñ—Å 360',
            '–∫–æ–¥ –Ñ–î–†–ü–û–£ 36701373',
            '–Ü–ü–ù 367013726544',
            '',
            '–ü/–†: UA693808050000000026006586065',
            '–ë–ê–ù–ö: –ê–¢ ¬´–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –ë–∞–Ω–∫ –ê–≤–∞–ª—å¬ª',
            '–ú–§–û: 380805',
            '–ü/–†: UA043005060000026006001053834',
            '–ë–ê–ù–ö: –ê–¢ ¬´–ü–ï–†–®–ò–ô –Ü–ù–í–ï–°–¢–ò–¶–Ü–ô–ù–ò–ô –ë–ê–ù–ö¬ª',
            '–ú–§–û: 300506',
            '',
            '—Ç–µ–ª.: +38 (067) 447 60 66',
            'email: office@pentada-trans.com'
        ]
    )
    await call.message.answer(requisits_info)

@dp.callback_query_handler(text_contains="officials")
async def cabinet_officials(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üë®‚Äçüíª <b>–ö–û–ù–¢–ê–ö–¢–ù–Ü –û–°–û–ë–ò</b>')
    await call.message.answer('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –æ—Å–æ–±–∏ –ü–¢ "–ü–ï–ù–¢–ê–î–ê –¢–†–ê–ù–°", —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—ñ –Ω–∞ –æ–±–º—ñ–Ω —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º.')
    officials_contacts = "\n".join(
        [
            '–ú–æ—Ä–µ–≤ –û–ª–µ–∫—Å—ñ–π –ì–µ–Ω–Ω–∞–¥—ñ–π–æ–≤–∏—á, –∑–∞—Å—Ç—É–ø–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞',
            '‚òéÔ∏è +380674769791', 
            'üìß agmorev@pentada-trans.com;',
            '',
            '–ë–∞–±–∞–π—Ü–µ–≤–∞ –í–µ—Ä–æ–Ω—ñ–∫–∞ –Ü–≥–æ—Ä—ñ–≤–Ω–∞, –∑–∞—Å—Ç—É–ø–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞',
            '‚òéÔ∏è +380674475467', 
            'üìß bvi@pentada-trans.com;',
            '',
            '–¢–∞—Ä–∞–Ω–µ–Ω–∫–æ –°–≤—ñ—Ç–ª–∞–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞, –≥–æ–ª–æ–≤–Ω–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä',
            '‚òéÔ∏è +380671657517', 
            'üìß fin@pentada-trans.com;',
            '',
            '–ö—É–∑–Ω–µ—Ü–æ–≤ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–æ–≤–∏—á, –Ω–∞—á–∞–ª—å–Ω–∏–∫ –≤—ñ–¥–¥—ñ–ª—É –ª–æ–≥—ñ—Å—Ç–∏–∫–∏ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞–Ω–Ω—è',
            '‚òéÔ∏è +380674769780', 
            'üìß akuznetsov@pentada-trans.com;',
            '',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑ –ª–æ–≥—ñ—Å—Ç–∏–∫–∏ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞–Ω–Ω—è (–æ–ø–µ—Ä–∞—Ç–æ—Ä–∏) - 24/7',
            '‚òéÔ∏è +380674476066', 
            'üìß zayavka_gd@pentada-trans.com.'
        ]
    )
    await call.message.answer(officials_contacts)